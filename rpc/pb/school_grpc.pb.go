// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: deploy/school.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Base_Ping_FullMethodName = "/pb.Base/Ping"
)

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Base_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility
type BaseServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have forward compatible implementations.
type UnimplementedBaseServer struct {
}

func (UnimplementedBaseServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Base_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy/school.proto",
}

const (
	User_CreateUser_FullMethodName  = "/pb.User/CreateUser"
	User_LoginUser_FullMethodName   = "/pb.User/LoginUser"
	User_GetInfoUser_FullMethodName = "/pb.User/GetInfoUser"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*InfoUserResp, error)
	GetInfoUser(ctx context.Context, in *GetInfoUserReq, opts ...grpc.CallOption) (*InfoUserResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*InfoUserResp, error) {
	out := new(InfoUserResp)
	err := c.cc.Invoke(ctx, User_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetInfoUser(ctx context.Context, in *GetInfoUserReq, opts ...grpc.CallOption) (*InfoUserResp, error) {
	out := new(InfoUserResp)
	err := c.cc.Invoke(ctx, User_GetInfoUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	LoginUser(context.Context, *LoginUserReq) (*InfoUserResp, error)
	GetInfoUser(context.Context, *GetInfoUserReq) (*InfoUserResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) LoginUser(context.Context, *LoginUserReq) (*InfoUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServer) GetInfoUser(context.Context, *GetInfoUserReq) (*InfoUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginUser(ctx, req.(*LoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetInfoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetInfoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetInfoUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetInfoUser(ctx, req.(*GetInfoUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _User_LoginUser_Handler,
		},
		{
			MethodName: "GetInfoUser",
			Handler:    _User_GetInfoUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy/school.proto",
}

const (
	Category_CreateCategory_FullMethodName  = "/pb.Category/CreateCategory"
	Category_GetCategory_FullMethodName     = "/pb.Category/GetCategory"
	Category_GetListCategory_FullMethodName = "/pb.Category/GetListCategory"
)

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CategoryInfo, error)
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*CategoryInfo, error)
	GetListCategory(ctx context.Context, in *GetListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
}

type categoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryClient(cc grpc.ClientConnInterface) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...grpc.CallOption) (*CategoryInfo, error) {
	out := new(CategoryInfo)
	err := c.cc.Invoke(ctx, Category_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*CategoryInfo, error) {
	out := new(CategoryInfo)
	err := c.cc.Invoke(ctx, Category_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetListCategory(ctx context.Context, in *GetListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	out := new(ListCategoryResp)
	err := c.cc.Invoke(ctx, Category_GetListCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
// All implementations must embed UnimplementedCategoryServer
// for forward compatibility
type CategoryServer interface {
	CreateCategory(context.Context, *CreateCategoryReq) (*CategoryInfo, error)
	GetCategory(context.Context, *GetCategoryReq) (*CategoryInfo, error)
	GetListCategory(context.Context, *GetListCategoryReq) (*ListCategoryResp, error)
	mustEmbedUnimplementedCategoryServer()
}

// UnimplementedCategoryServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServer struct {
}

func (UnimplementedCategoryServer) CreateCategory(context.Context, *CreateCategoryReq) (*CategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServer) GetCategory(context.Context, *GetCategoryReq) (*CategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCategoryServer) GetListCategory(context.Context, *GetListCategoryReq) (*ListCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCategory not implemented")
}
func (UnimplementedCategoryServer) mustEmbedUnimplementedCategoryServer() {}

// UnsafeCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServer will
// result in compilation errors.
type UnsafeCategoryServer interface {
	mustEmbedUnimplementedCategoryServer()
}

func RegisterCategoryServer(s grpc.ServiceRegistrar, srv CategoryServer) {
	s.RegisterService(&Category_ServiceDesc, srv)
}

func _Category_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CreateCategory(ctx, req.(*CreateCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategory(ctx, req.(*GetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_GetListCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetListCategory(ctx, req.(*GetListCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Category_ServiceDesc is the grpc.ServiceDesc for Category service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Category_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _Category_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Category_GetCategory_Handler,
		},
		{
			MethodName: "GetListCategory",
			Handler:    _Category_GetListCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy/school.proto",
}

const (
	Article_CreateArticle_FullMethodName  = "/pb.Article/CreateArticle"
	Article_GetArticle_FullMethodName     = "/pb.Article/GetArticle"
	Article_GetListArticle_FullMethodName = "/pb.Article/GetListArticle"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error)
	GetArticle(ctx context.Context, in *GetInfoArticleReq, opts ...grpc.CallOption) (*ArticleInfo, error)
	GetListArticle(ctx context.Context, in *GetListArticleReq, opts ...grpc.CallOption) (*GetListArticleResp, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error) {
	out := new(CreateArticleResp)
	err := c.cc.Invoke(ctx, Article_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticle(ctx context.Context, in *GetInfoArticleReq, opts ...grpc.CallOption) (*ArticleInfo, error) {
	out := new(ArticleInfo)
	err := c.cc.Invoke(ctx, Article_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetListArticle(ctx context.Context, in *GetListArticleReq, opts ...grpc.CallOption) (*GetListArticleResp, error) {
	out := new(GetListArticleResp)
	err := c.cc.Invoke(ctx, Article_GetListArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleResp, error)
	GetArticle(context.Context, *GetInfoArticleReq) (*ArticleInfo, error)
	GetListArticle(context.Context, *GetListArticleReq) (*GetListArticleResp, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleServer) GetArticle(context.Context, *GetInfoArticleReq) (*ArticleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServer) GetListArticle(context.Context, *GetListArticleReq) (*GetListArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListArticle not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticle(ctx, req.(*GetInfoArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetListArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetListArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetListArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetListArticle(ctx, req.(*GetListArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _Article_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Article_GetArticle_Handler,
		},
		{
			MethodName: "GetListArticle",
			Handler:    _Article_GetListArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy/school.proto",
}

const (
	Swiper_AddSwiper_FullMethodName     = "/pb.Swiper/AddSwiper"
	Swiper_OperateSwiper_FullMethodName = "/pb.Swiper/OperateSwiper"
	Swiper_ListSwiper_FullMethodName    = "/pb.Swiper/ListSwiper"
	Swiper_UpdateSwiper_FullMethodName  = "/pb.Swiper/UpdateSwiper"
)

// SwiperClient is the client API for Swiper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwiperClient interface {
	AddSwiper(ctx context.Context, in *AddSwiperReq, opts ...grpc.CallOption) (*InfoSwiper, error)
	// OperateSwiper 简单编辑轮播图
	// 上架 -> up
	// 下架 -> down
	// 删除 -> del
	OperateSwiper(ctx context.Context, in *OperateSwiperReq, opts ...grpc.CallOption) (*OperateSwiperResp, error)
	// ListSwiper 轮播图列表
	ListSwiper(ctx context.Context, in *ListSwiperReq, opts ...grpc.CallOption) (*ListSwiperResp, error)
	// UpdateSwiper 更新轮播图
	UpdateSwiper(ctx context.Context, in *UpdateSwiperReq, opts ...grpc.CallOption) (*InfoSwiper, error)
}

type swiperClient struct {
	cc grpc.ClientConnInterface
}

func NewSwiperClient(cc grpc.ClientConnInterface) SwiperClient {
	return &swiperClient{cc}
}

func (c *swiperClient) AddSwiper(ctx context.Context, in *AddSwiperReq, opts ...grpc.CallOption) (*InfoSwiper, error) {
	out := new(InfoSwiper)
	err := c.cc.Invoke(ctx, Swiper_AddSwiper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiperClient) OperateSwiper(ctx context.Context, in *OperateSwiperReq, opts ...grpc.CallOption) (*OperateSwiperResp, error) {
	out := new(OperateSwiperResp)
	err := c.cc.Invoke(ctx, Swiper_OperateSwiper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiperClient) ListSwiper(ctx context.Context, in *ListSwiperReq, opts ...grpc.CallOption) (*ListSwiperResp, error) {
	out := new(ListSwiperResp)
	err := c.cc.Invoke(ctx, Swiper_ListSwiper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiperClient) UpdateSwiper(ctx context.Context, in *UpdateSwiperReq, opts ...grpc.CallOption) (*InfoSwiper, error) {
	out := new(InfoSwiper)
	err := c.cc.Invoke(ctx, Swiper_UpdateSwiper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwiperServer is the server API for Swiper service.
// All implementations must embed UnimplementedSwiperServer
// for forward compatibility
type SwiperServer interface {
	AddSwiper(context.Context, *AddSwiperReq) (*InfoSwiper, error)
	// OperateSwiper 简单编辑轮播图
	// 上架 -> up
	// 下架 -> down
	// 删除 -> del
	OperateSwiper(context.Context, *OperateSwiperReq) (*OperateSwiperResp, error)
	// ListSwiper 轮播图列表
	ListSwiper(context.Context, *ListSwiperReq) (*ListSwiperResp, error)
	// UpdateSwiper 更新轮播图
	UpdateSwiper(context.Context, *UpdateSwiperReq) (*InfoSwiper, error)
	mustEmbedUnimplementedSwiperServer()
}

// UnimplementedSwiperServer must be embedded to have forward compatible implementations.
type UnimplementedSwiperServer struct {
}

func (UnimplementedSwiperServer) AddSwiper(context.Context, *AddSwiperReq) (*InfoSwiper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwiper not implemented")
}
func (UnimplementedSwiperServer) OperateSwiper(context.Context, *OperateSwiperReq) (*OperateSwiperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateSwiper not implemented")
}
func (UnimplementedSwiperServer) ListSwiper(context.Context, *ListSwiperReq) (*ListSwiperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwiper not implemented")
}
func (UnimplementedSwiperServer) UpdateSwiper(context.Context, *UpdateSwiperReq) (*InfoSwiper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwiper not implemented")
}
func (UnimplementedSwiperServer) mustEmbedUnimplementedSwiperServer() {}

// UnsafeSwiperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwiperServer will
// result in compilation errors.
type UnsafeSwiperServer interface {
	mustEmbedUnimplementedSwiperServer()
}

func RegisterSwiperServer(s grpc.ServiceRegistrar, srv SwiperServer) {
	s.RegisterService(&Swiper_ServiceDesc, srv)
}

func _Swiper_AddSwiper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSwiperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiperServer).AddSwiper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swiper_AddSwiper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiperServer).AddSwiper(ctx, req.(*AddSwiperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swiper_OperateSwiper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateSwiperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiperServer).OperateSwiper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swiper_OperateSwiper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiperServer).OperateSwiper(ctx, req.(*OperateSwiperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swiper_ListSwiper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwiperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiperServer).ListSwiper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swiper_ListSwiper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiperServer).ListSwiper(ctx, req.(*ListSwiperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swiper_UpdateSwiper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwiperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiperServer).UpdateSwiper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Swiper_UpdateSwiper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiperServer).UpdateSwiper(ctx, req.(*UpdateSwiperReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Swiper_ServiceDesc is the grpc.ServiceDesc for Swiper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swiper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Swiper",
	HandlerType: (*SwiperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSwiper",
			Handler:    _Swiper_AddSwiper_Handler,
		},
		{
			MethodName: "OperateSwiper",
			Handler:    _Swiper_OperateSwiper_Handler,
		},
		{
			MethodName: "ListSwiper",
			Handler:    _Swiper_ListSwiper_Handler,
		},
		{
			MethodName: "UpdateSwiper",
			Handler:    _Swiper_UpdateSwiper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy/school.proto",
}
