// Code generated by goctl. DO NOT EDIT.
// Source: school.proto

package server

import (
	"context"

	"github.com/xxcheng123/primary-school-system/rpc/internal/logic/swiper"
	"github.com/xxcheng123/primary-school-system/rpc/internal/svc"
	"github.com/xxcheng123/primary-school-system/rpc/pb"
)

type SwiperServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedSwiperServer
}

func NewSwiperServer(svcCtx *svc.ServiceContext) *SwiperServer {
	return &SwiperServer{
		svcCtx: svcCtx,
	}
}

func (s *SwiperServer) AddSwiper(ctx context.Context, in *pb.AddSwiperReq) (*pb.InfoSwiper, error) {
	l := swiperlogic.NewAddSwiperLogic(ctx, s.svcCtx)
	return l.AddSwiper(in)
}

// OperateSwiper 简单编辑轮播图
func (s *SwiperServer) OperateSwiper(ctx context.Context, in *pb.OperateSwiperReq) (*pb.OperateSwiperResp, error) {
	l := swiperlogic.NewOperateSwiperLogic(ctx, s.svcCtx)
	return l.OperateSwiper(in)
}

// ListSwiper 轮播图列表
func (s *SwiperServer) ListSwiper(ctx context.Context, in *pb.ListSwiperReq) (*pb.ListSwiperResp, error) {
	l := swiperlogic.NewListSwiperLogic(ctx, s.svcCtx)
	return l.ListSwiper(in)
}

// UpdateSwiper 更新轮播图
func (s *SwiperServer) UpdateSwiper(ctx context.Context, in *pb.UpdateSwiperReq) (*pb.InfoSwiper, error) {
	l := swiperlogic.NewUpdateSwiperLogic(ctx, s.svcCtx)
	return l.UpdateSwiper(in)
}
