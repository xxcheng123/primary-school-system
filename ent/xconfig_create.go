// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xxcheng123/primary-school-system/ent/xconfig"
)

// XConfigCreate is the builder for creating a XConfig entity.
type XConfigCreate struct {
	config
	mutation *XConfigMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (xc *XConfigCreate) SetCreateTime(t time.Time) *XConfigCreate {
	xc.mutation.SetCreateTime(t)
	return xc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableCreateTime(t *time.Time) *XConfigCreate {
	if t != nil {
		xc.SetCreateTime(*t)
	}
	return xc
}

// SetUpdateTime sets the "update_time" field.
func (xc *XConfigCreate) SetUpdateTime(t time.Time) *XConfigCreate {
	xc.mutation.SetUpdateTime(t)
	return xc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableUpdateTime(t *time.Time) *XConfigCreate {
	if t != nil {
		xc.SetUpdateTime(*t)
	}
	return xc
}

// SetDeletedAt sets the "deleted_at" field.
func (xc *XConfigCreate) SetDeletedAt(t time.Time) *XConfigCreate {
	xc.mutation.SetDeletedAt(t)
	return xc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableDeletedAt(t *time.Time) *XConfigCreate {
	if t != nil {
		xc.SetDeletedAt(*t)
	}
	return xc
}

// SetKey sets the "key" field.
func (xc *XConfigCreate) SetKey(s string) *XConfigCreate {
	xc.mutation.SetKey(s)
	return xc
}

// SetValue sets the "value" field.
func (xc *XConfigCreate) SetValue(s string) *XConfigCreate {
	xc.mutation.SetValue(s)
	return xc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableValue(s *string) *XConfigCreate {
	if s != nil {
		xc.SetValue(*s)
	}
	return xc
}

// SetDesc sets the "desc" field.
func (xc *XConfigCreate) SetDesc(s string) *XConfigCreate {
	xc.mutation.SetDesc(s)
	return xc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableDesc(s *string) *XConfigCreate {
	if s != nil {
		xc.SetDesc(*s)
	}
	return xc
}

// SetID sets the "id" field.
func (xc *XConfigCreate) SetID(i int64) *XConfigCreate {
	xc.mutation.SetID(i)
	return xc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (xc *XConfigCreate) SetNillableID(i *int64) *XConfigCreate {
	if i != nil {
		xc.SetID(*i)
	}
	return xc
}

// Mutation returns the XConfigMutation object of the builder.
func (xc *XConfigCreate) Mutation() *XConfigMutation {
	return xc.mutation
}

// Save creates the XConfig in the database.
func (xc *XConfigCreate) Save(ctx context.Context) (*XConfig, error) {
	if err := xc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, xc.sqlSave, xc.mutation, xc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (xc *XConfigCreate) SaveX(ctx context.Context) *XConfig {
	v, err := xc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xc *XConfigCreate) Exec(ctx context.Context) error {
	_, err := xc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xc *XConfigCreate) ExecX(ctx context.Context) {
	if err := xc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xc *XConfigCreate) defaults() error {
	if _, ok := xc.mutation.CreateTime(); !ok {
		if xconfig.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized xconfig.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := xconfig.DefaultCreateTime()
		xc.mutation.SetCreateTime(v)
	}
	if _, ok := xc.mutation.UpdateTime(); !ok {
		if xconfig.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized xconfig.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := xconfig.DefaultUpdateTime()
		xc.mutation.SetUpdateTime(v)
	}
	if _, ok := xc.mutation.Value(); !ok {
		v := xconfig.DefaultValue
		xc.mutation.SetValue(v)
	}
	if _, ok := xc.mutation.Desc(); !ok {
		v := xconfig.DefaultDesc
		xc.mutation.SetDesc(v)
	}
	if _, ok := xc.mutation.ID(); !ok {
		if xconfig.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized xconfig.DefaultID (forgotten import ent/runtime?)")
		}
		v := xconfig.DefaultID()
		xc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (xc *XConfigCreate) check() error {
	if _, ok := xc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "XConfig.create_time"`)}
	}
	if _, ok := xc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "XConfig.update_time"`)}
	}
	if _, ok := xc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "XConfig.key"`)}
	}
	if _, ok := xc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "XConfig.value"`)}
	}
	if _, ok := xc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "XConfig.desc"`)}
	}
	return nil
}

func (xc *XConfigCreate) sqlSave(ctx context.Context) (*XConfig, error) {
	if err := xc.check(); err != nil {
		return nil, err
	}
	_node, _spec := xc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	xc.mutation.id = &_node.ID
	xc.mutation.done = true
	return _node, nil
}

func (xc *XConfigCreate) createSpec() (*XConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &XConfig{config: xc.config}
		_spec = sqlgraph.NewCreateSpec(xconfig.Table, sqlgraph.NewFieldSpec(xconfig.FieldID, field.TypeInt64))
	)
	if id, ok := xc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := xc.mutation.CreateTime(); ok {
		_spec.SetField(xconfig.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := xc.mutation.UpdateTime(); ok {
		_spec.SetField(xconfig.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := xc.mutation.DeletedAt(); ok {
		_spec.SetField(xconfig.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := xc.mutation.Key(); ok {
		_spec.SetField(xconfig.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := xc.mutation.Value(); ok {
		_spec.SetField(xconfig.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := xc.mutation.Desc(); ok {
		_spec.SetField(xconfig.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	return _node, _spec
}

// XConfigCreateBulk is the builder for creating many XConfig entities in bulk.
type XConfigCreateBulk struct {
	config
	err      error
	builders []*XConfigCreate
}

// Save creates the XConfig entities in the database.
func (xcb *XConfigCreateBulk) Save(ctx context.Context) ([]*XConfig, error) {
	if xcb.err != nil {
		return nil, xcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(xcb.builders))
	nodes := make([]*XConfig, len(xcb.builders))
	mutators := make([]Mutator, len(xcb.builders))
	for i := range xcb.builders {
		func(i int, root context.Context) {
			builder := xcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xcb *XConfigCreateBulk) SaveX(ctx context.Context) []*XConfig {
	v, err := xcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xcb *XConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := xcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xcb *XConfigCreateBulk) ExecX(ctx context.Context) {
	if err := xcb.Exec(ctx); err != nil {
		panic(err)
	}
}
