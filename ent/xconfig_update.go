// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xxcheng123/primary-school-system/ent/predicate"
	"github.com/xxcheng123/primary-school-system/ent/xconfig"
)

// XConfigUpdate is the builder for updating XConfig entities.
type XConfigUpdate struct {
	config
	hooks    []Hook
	mutation *XConfigMutation
}

// Where appends a list predicates to the XConfigUpdate builder.
func (xu *XConfigUpdate) Where(ps ...predicate.XConfig) *XConfigUpdate {
	xu.mutation.Where(ps...)
	return xu
}

// SetUpdateTime sets the "update_time" field.
func (xu *XConfigUpdate) SetUpdateTime(t time.Time) *XConfigUpdate {
	xu.mutation.SetUpdateTime(t)
	return xu
}

// SetDeletedAt sets the "deleted_at" field.
func (xu *XConfigUpdate) SetDeletedAt(t time.Time) *XConfigUpdate {
	xu.mutation.SetDeletedAt(t)
	return xu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (xu *XConfigUpdate) SetNillableDeletedAt(t *time.Time) *XConfigUpdate {
	if t != nil {
		xu.SetDeletedAt(*t)
	}
	return xu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (xu *XConfigUpdate) ClearDeletedAt() *XConfigUpdate {
	xu.mutation.ClearDeletedAt()
	return xu
}

// SetKey sets the "key" field.
func (xu *XConfigUpdate) SetKey(s string) *XConfigUpdate {
	xu.mutation.SetKey(s)
	return xu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (xu *XConfigUpdate) SetNillableKey(s *string) *XConfigUpdate {
	if s != nil {
		xu.SetKey(*s)
	}
	return xu
}

// SetValue sets the "value" field.
func (xu *XConfigUpdate) SetValue(s string) *XConfigUpdate {
	xu.mutation.SetValue(s)
	return xu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (xu *XConfigUpdate) SetNillableValue(s *string) *XConfigUpdate {
	if s != nil {
		xu.SetValue(*s)
	}
	return xu
}

// SetDesc sets the "desc" field.
func (xu *XConfigUpdate) SetDesc(s string) *XConfigUpdate {
	xu.mutation.SetDesc(s)
	return xu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (xu *XConfigUpdate) SetNillableDesc(s *string) *XConfigUpdate {
	if s != nil {
		xu.SetDesc(*s)
	}
	return xu
}

// Mutation returns the XConfigMutation object of the builder.
func (xu *XConfigUpdate) Mutation() *XConfigMutation {
	return xu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (xu *XConfigUpdate) Save(ctx context.Context) (int, error) {
	if err := xu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, xu.sqlSave, xu.mutation, xu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xu *XConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := xu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (xu *XConfigUpdate) Exec(ctx context.Context) error {
	_, err := xu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xu *XConfigUpdate) ExecX(ctx context.Context) {
	if err := xu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xu *XConfigUpdate) defaults() error {
	if _, ok := xu.mutation.UpdateTime(); !ok {
		if xconfig.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized xconfig.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := xconfig.UpdateDefaultUpdateTime()
		xu.mutation.SetUpdateTime(v)
	}
	return nil
}

func (xu *XConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(xconfig.Table, xconfig.Columns, sqlgraph.NewFieldSpec(xconfig.FieldID, field.TypeInt64))
	if ps := xu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xu.mutation.UpdateTime(); ok {
		_spec.SetField(xconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := xu.mutation.DeletedAt(); ok {
		_spec.SetField(xconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if xu.mutation.DeletedAtCleared() {
		_spec.ClearField(xconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := xu.mutation.Key(); ok {
		_spec.SetField(xconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := xu.mutation.Value(); ok {
		_spec.SetField(xconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := xu.mutation.Desc(); ok {
		_spec.SetField(xconfig.FieldDesc, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, xu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	xu.mutation.done = true
	return n, nil
}

// XConfigUpdateOne is the builder for updating a single XConfig entity.
type XConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *XConfigMutation
}

// SetUpdateTime sets the "update_time" field.
func (xuo *XConfigUpdateOne) SetUpdateTime(t time.Time) *XConfigUpdateOne {
	xuo.mutation.SetUpdateTime(t)
	return xuo
}

// SetDeletedAt sets the "deleted_at" field.
func (xuo *XConfigUpdateOne) SetDeletedAt(t time.Time) *XConfigUpdateOne {
	xuo.mutation.SetDeletedAt(t)
	return xuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (xuo *XConfigUpdateOne) SetNillableDeletedAt(t *time.Time) *XConfigUpdateOne {
	if t != nil {
		xuo.SetDeletedAt(*t)
	}
	return xuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (xuo *XConfigUpdateOne) ClearDeletedAt() *XConfigUpdateOne {
	xuo.mutation.ClearDeletedAt()
	return xuo
}

// SetKey sets the "key" field.
func (xuo *XConfigUpdateOne) SetKey(s string) *XConfigUpdateOne {
	xuo.mutation.SetKey(s)
	return xuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (xuo *XConfigUpdateOne) SetNillableKey(s *string) *XConfigUpdateOne {
	if s != nil {
		xuo.SetKey(*s)
	}
	return xuo
}

// SetValue sets the "value" field.
func (xuo *XConfigUpdateOne) SetValue(s string) *XConfigUpdateOne {
	xuo.mutation.SetValue(s)
	return xuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (xuo *XConfigUpdateOne) SetNillableValue(s *string) *XConfigUpdateOne {
	if s != nil {
		xuo.SetValue(*s)
	}
	return xuo
}

// SetDesc sets the "desc" field.
func (xuo *XConfigUpdateOne) SetDesc(s string) *XConfigUpdateOne {
	xuo.mutation.SetDesc(s)
	return xuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (xuo *XConfigUpdateOne) SetNillableDesc(s *string) *XConfigUpdateOne {
	if s != nil {
		xuo.SetDesc(*s)
	}
	return xuo
}

// Mutation returns the XConfigMutation object of the builder.
func (xuo *XConfigUpdateOne) Mutation() *XConfigMutation {
	return xuo.mutation
}

// Where appends a list predicates to the XConfigUpdate builder.
func (xuo *XConfigUpdateOne) Where(ps ...predicate.XConfig) *XConfigUpdateOne {
	xuo.mutation.Where(ps...)
	return xuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (xuo *XConfigUpdateOne) Select(field string, fields ...string) *XConfigUpdateOne {
	xuo.fields = append([]string{field}, fields...)
	return xuo
}

// Save executes the query and returns the updated XConfig entity.
func (xuo *XConfigUpdateOne) Save(ctx context.Context) (*XConfig, error) {
	if err := xuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, xuo.sqlSave, xuo.mutation, xuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (xuo *XConfigUpdateOne) SaveX(ctx context.Context) *XConfig {
	node, err := xuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (xuo *XConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := xuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xuo *XConfigUpdateOne) ExecX(ctx context.Context) {
	if err := xuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xuo *XConfigUpdateOne) defaults() error {
	if _, ok := xuo.mutation.UpdateTime(); !ok {
		if xconfig.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized xconfig.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := xconfig.UpdateDefaultUpdateTime()
		xuo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (xuo *XConfigUpdateOne) sqlSave(ctx context.Context) (_node *XConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(xconfig.Table, xconfig.Columns, sqlgraph.NewFieldSpec(xconfig.FieldID, field.TypeInt64))
	id, ok := xuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "XConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := xuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, xconfig.FieldID)
		for _, f := range fields {
			if !xconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != xconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := xuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := xuo.mutation.UpdateTime(); ok {
		_spec.SetField(xconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := xuo.mutation.DeletedAt(); ok {
		_spec.SetField(xconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if xuo.mutation.DeletedAtCleared() {
		_spec.ClearField(xconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := xuo.mutation.Key(); ok {
		_spec.SetField(xconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := xuo.mutation.Value(); ok {
		_spec.SetField(xconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := xuo.mutation.Desc(); ok {
		_spec.SetField(xconfig.FieldDesc, field.TypeString, value)
	}
	_node = &XConfig{config: xuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, xuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{xconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	xuo.mutation.done = true
	return _node, nil
}
