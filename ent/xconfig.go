// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xxcheng123/primary-school-system/ent/xconfig"
)

// XConfig is the model entity for the XConfig schema.
type XConfig struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花ID
	ID int64 `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc         string `json:"desc,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case xconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case xconfig.FieldKey, xconfig.FieldValue, xconfig.FieldDesc:
			values[i] = new(sql.NullString)
		case xconfig.FieldCreateTime, xconfig.FieldUpdateTime, xconfig.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XConfig fields.
func (x *XConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			x.ID = int64(value.Int64)
		case xconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				x.CreateTime = value.Time
			}
		case xconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				x.UpdateTime = value.Time
			}
		case xconfig.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				x.DeletedAt = value.Time
			}
		case xconfig.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				x.Key = value.String
			}
		case xconfig.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				x.Value = value.String
			}
		case xconfig.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				x.Desc = value.String
			}
		default:
			x.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the XConfig.
// This includes values selected through modifiers, order, etc.
func (x *XConfig) GetValue(name string) (ent.Value, error) {
	return x.selectValues.Get(name)
}

// Update returns a builder for updating this XConfig.
// Note that you need to call XConfig.Unwrap() before calling this method if this XConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (x *XConfig) Update() *XConfigUpdateOne {
	return NewXConfigClient(x.config).UpdateOne(x)
}

// Unwrap unwraps the XConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (x *XConfig) Unwrap() *XConfig {
	_tx, ok := x.config.driver.(*txDriver)
	if !ok {
		panic("ent: XConfig is not a transactional entity")
	}
	x.config.driver = _tx.drv
	return x
}

// String implements the fmt.Stringer.
func (x *XConfig) String() string {
	var builder strings.Builder
	builder.WriteString("XConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", x.ID))
	builder.WriteString("create_time=")
	builder.WriteString(x.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(x.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(x.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(x.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(x.Value)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(x.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// XConfigs is a parsable slice of XConfig.
type XConfigs []*XConfig
