// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xxcheng123/primary-school-system/ent/predicate"
	"github.com/xxcheng123/primary-school-system/ent/swiper"
)

// SwiperUpdate is the builder for updating Swiper entities.
type SwiperUpdate struct {
	config
	hooks    []Hook
	mutation *SwiperMutation
}

// Where appends a list predicates to the SwiperUpdate builder.
func (su *SwiperUpdate) Where(ps ...predicate.Swiper) *SwiperUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SwiperUpdate) SetUpdateTime(t time.Time) *SwiperUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SwiperUpdate) SetDeletedAt(t time.Time) *SwiperUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableDeletedAt(t *time.Time) *SwiperUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SwiperUpdate) ClearDeletedAt() *SwiperUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetTitle sets the "title" field.
func (su *SwiperUpdate) SetTitle(s string) *SwiperUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableTitle(s *string) *SwiperUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetImg sets the "img" field.
func (su *SwiperUpdate) SetImg(s string) *SwiperUpdate {
	su.mutation.SetImg(s)
	return su
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableImg(s *string) *SwiperUpdate {
	if s != nil {
		su.SetImg(*s)
	}
	return su
}

// SetURL sets the "url" field.
func (su *SwiperUpdate) SetURL(s string) *SwiperUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableURL(s *string) *SwiperUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetOrder sets the "order" field.
func (su *SwiperUpdate) SetOrder(i int64) *SwiperUpdate {
	su.mutation.ResetOrder()
	su.mutation.SetOrder(i)
	return su
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableOrder(i *int64) *SwiperUpdate {
	if i != nil {
		su.SetOrder(*i)
	}
	return su
}

// AddOrder adds i to the "order" field.
func (su *SwiperUpdate) AddOrder(i int64) *SwiperUpdate {
	su.mutation.AddOrder(i)
	return su
}

// SetStatus sets the "status" field.
func (su *SwiperUpdate) SetStatus(i int64) *SwiperUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SwiperUpdate) SetNillableStatus(i *int64) *SwiperUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SwiperUpdate) AddStatus(i int64) *SwiperUpdate {
	su.mutation.AddStatus(i)
	return su
}

// Mutation returns the SwiperMutation object of the builder.
func (su *SwiperUpdate) Mutation() *SwiperMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SwiperUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SwiperUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SwiperUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SwiperUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SwiperUpdate) defaults() error {
	if _, ok := su.mutation.UpdateTime(); !ok {
		if swiper.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized swiper.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := swiper.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
	return nil
}

func (su *SwiperUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(swiper.Table, swiper.Columns, sqlgraph.NewFieldSpec(swiper.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(swiper.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(swiper.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(swiper.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(swiper.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Img(); ok {
		_spec.SetField(swiper.FieldImg, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(swiper.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Order(); ok {
		_spec.SetField(swiper.FieldOrder, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedOrder(); ok {
		_spec.AddField(swiper.FieldOrder, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(swiper.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(swiper.FieldStatus, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swiper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SwiperUpdateOne is the builder for updating a single Swiper entity.
type SwiperUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SwiperMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SwiperUpdateOne) SetUpdateTime(t time.Time) *SwiperUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SwiperUpdateOne) SetDeletedAt(t time.Time) *SwiperUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableDeletedAt(t *time.Time) *SwiperUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SwiperUpdateOne) ClearDeletedAt() *SwiperUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetTitle sets the "title" field.
func (suo *SwiperUpdateOne) SetTitle(s string) *SwiperUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableTitle(s *string) *SwiperUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetImg sets the "img" field.
func (suo *SwiperUpdateOne) SetImg(s string) *SwiperUpdateOne {
	suo.mutation.SetImg(s)
	return suo
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableImg(s *string) *SwiperUpdateOne {
	if s != nil {
		suo.SetImg(*s)
	}
	return suo
}

// SetURL sets the "url" field.
func (suo *SwiperUpdateOne) SetURL(s string) *SwiperUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableURL(s *string) *SwiperUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetOrder sets the "order" field.
func (suo *SwiperUpdateOne) SetOrder(i int64) *SwiperUpdateOne {
	suo.mutation.ResetOrder()
	suo.mutation.SetOrder(i)
	return suo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableOrder(i *int64) *SwiperUpdateOne {
	if i != nil {
		suo.SetOrder(*i)
	}
	return suo
}

// AddOrder adds i to the "order" field.
func (suo *SwiperUpdateOne) AddOrder(i int64) *SwiperUpdateOne {
	suo.mutation.AddOrder(i)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SwiperUpdateOne) SetStatus(i int64) *SwiperUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SwiperUpdateOne) SetNillableStatus(i *int64) *SwiperUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SwiperUpdateOne) AddStatus(i int64) *SwiperUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// Mutation returns the SwiperMutation object of the builder.
func (suo *SwiperUpdateOne) Mutation() *SwiperMutation {
	return suo.mutation
}

// Where appends a list predicates to the SwiperUpdate builder.
func (suo *SwiperUpdateOne) Where(ps ...predicate.Swiper) *SwiperUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SwiperUpdateOne) Select(field string, fields ...string) *SwiperUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Swiper entity.
func (suo *SwiperUpdateOne) Save(ctx context.Context) (*Swiper, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SwiperUpdateOne) SaveX(ctx context.Context) *Swiper {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SwiperUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SwiperUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SwiperUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		if swiper.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized swiper.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := swiper.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
	return nil
}

func (suo *SwiperUpdateOne) sqlSave(ctx context.Context) (_node *Swiper, err error) {
	_spec := sqlgraph.NewUpdateSpec(swiper.Table, swiper.Columns, sqlgraph.NewFieldSpec(swiper.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Swiper.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, swiper.FieldID)
		for _, f := range fields {
			if !swiper.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != swiper.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(swiper.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(swiper.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(swiper.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(swiper.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Img(); ok {
		_spec.SetField(swiper.FieldImg, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(swiper.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Order(); ok {
		_spec.SetField(swiper.FieldOrder, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedOrder(); ok {
		_spec.AddField(swiper.FieldOrder, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(swiper.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(swiper.FieldStatus, field.TypeInt64, value)
	}
	_node = &Swiper{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{swiper.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
