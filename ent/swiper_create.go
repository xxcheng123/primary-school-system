// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xxcheng123/primary-school-system/ent/swiper"
)

// SwiperCreate is the builder for creating a Swiper entity.
type SwiperCreate struct {
	config
	mutation *SwiperMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SwiperCreate) SetCreateTime(t time.Time) *SwiperCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableCreateTime(t *time.Time) *SwiperCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SwiperCreate) SetUpdateTime(t time.Time) *SwiperCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableUpdateTime(t *time.Time) *SwiperCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SwiperCreate) SetDeletedAt(t time.Time) *SwiperCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableDeletedAt(t *time.Time) *SwiperCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *SwiperCreate) SetTitle(s string) *SwiperCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableTitle(s *string) *SwiperCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetImg sets the "img" field.
func (sc *SwiperCreate) SetImg(s string) *SwiperCreate {
	sc.mutation.SetImg(s)
	return sc
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableImg(s *string) *SwiperCreate {
	if s != nil {
		sc.SetImg(*s)
	}
	return sc
}

// SetURL sets the "url" field.
func (sc *SwiperCreate) SetURL(s string) *SwiperCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableURL(s *string) *SwiperCreate {
	if s != nil {
		sc.SetURL(*s)
	}
	return sc
}

// SetOrder sets the "order" field.
func (sc *SwiperCreate) SetOrder(i int64) *SwiperCreate {
	sc.mutation.SetOrder(i)
	return sc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableOrder(i *int64) *SwiperCreate {
	if i != nil {
		sc.SetOrder(*i)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SwiperCreate) SetStatus(i int64) *SwiperCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableStatus(i *int64) *SwiperCreate {
	if i != nil {
		sc.SetStatus(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SwiperCreate) SetID(i int64) *SwiperCreate {
	sc.mutation.SetID(i)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SwiperCreate) SetNillableID(i *int64) *SwiperCreate {
	if i != nil {
		sc.SetID(*i)
	}
	return sc
}

// Mutation returns the SwiperMutation object of the builder.
func (sc *SwiperCreate) Mutation() *SwiperMutation {
	return sc.mutation
}

// Save creates the Swiper in the database.
func (sc *SwiperCreate) Save(ctx context.Context) (*Swiper, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SwiperCreate) SaveX(ctx context.Context) *Swiper {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SwiperCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SwiperCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SwiperCreate) defaults() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		if swiper.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized swiper.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := swiper.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		if swiper.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized swiper.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := swiper.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.Title(); !ok {
		v := swiper.DefaultTitle
		sc.mutation.SetTitle(v)
	}
	if _, ok := sc.mutation.Img(); !ok {
		v := swiper.DefaultImg
		sc.mutation.SetImg(v)
	}
	if _, ok := sc.mutation.URL(); !ok {
		v := swiper.DefaultURL
		sc.mutation.SetURL(v)
	}
	if _, ok := sc.mutation.Order(); !ok {
		v := swiper.DefaultOrder
		sc.mutation.SetOrder(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := swiper.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if swiper.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized swiper.DefaultID (forgotten import ent/runtime?)")
		}
		v := swiper.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SwiperCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Swiper.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Swiper.update_time"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Swiper.title"`)}
	}
	if _, ok := sc.mutation.Img(); !ok {
		return &ValidationError{Name: "img", err: errors.New(`ent: missing required field "Swiper.img"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Swiper.url"`)}
	}
	if _, ok := sc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Swiper.order"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Swiper.status"`)}
	}
	return nil
}

func (sc *SwiperCreate) sqlSave(ctx context.Context) (*Swiper, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SwiperCreate) createSpec() (*Swiper, *sqlgraph.CreateSpec) {
	var (
		_node = &Swiper{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(swiper.Table, sqlgraph.NewFieldSpec(swiper.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(swiper.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(swiper.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(swiper.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(swiper.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Img(); ok {
		_spec.SetField(swiper.FieldImg, field.TypeString, value)
		_node.Img = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(swiper.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Order(); ok {
		_spec.SetField(swiper.FieldOrder, field.TypeInt64, value)
		_node.Order = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(swiper.FieldStatus, field.TypeInt64, value)
		_node.Status = value
	}
	return _node, _spec
}

// SwiperCreateBulk is the builder for creating many Swiper entities in bulk.
type SwiperCreateBulk struct {
	config
	err      error
	builders []*SwiperCreate
}

// Save creates the Swiper entities in the database.
func (scb *SwiperCreateBulk) Save(ctx context.Context) ([]*Swiper, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Swiper, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SwiperMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SwiperCreateBulk) SaveX(ctx context.Context) []*Swiper {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SwiperCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SwiperCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
