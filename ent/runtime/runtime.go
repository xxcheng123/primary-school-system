// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/xxcheng123/primary-school-system/ent/article"
	"github.com/xxcheng123/primary-school-system/ent/category"
	"github.com/xxcheng123/primary-school-system/ent/schema"
	"github.com/xxcheng123/primary-school-system/ent/swiper"
	"github.com/xxcheng123/primary-school-system/ent/user"
	"github.com/xxcheng123/primary-school-system/ent/xconfig"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinHooks2 := articleMixin[2].Hooks()
	article.Hooks[0] = articleMixinHooks2[0]
	articleMixinInters2 := articleMixin[2].Interceptors()
	article.Interceptors[0] = articleMixinInters2[0]
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleMixinFields1 := articleMixin[1].Fields()
	_ = articleMixinFields1
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescCreateTime is the schema descriptor for create_time field.
	articleDescCreateTime := articleMixinFields1[0].Descriptor()
	// article.DefaultCreateTime holds the default value on creation for the create_time field.
	article.DefaultCreateTime = articleDescCreateTime.Default.(func() time.Time)
	// articleDescUpdateTime is the schema descriptor for update_time field.
	articleDescUpdateTime := articleMixinFields1[1].Descriptor()
	// article.DefaultUpdateTime holds the default value on creation for the update_time field.
	article.DefaultUpdateTime = articleDescUpdateTime.Default.(func() time.Time)
	// article.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	article.UpdateDefaultUpdateTime = articleDescUpdateTime.UpdateDefault.(func() time.Time)
	// articleDescTitle is the schema descriptor for title field.
	articleDescTitle := articleFields[0].Descriptor()
	// article.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	article.TitleValidator = func() func(string) error {
		validators := articleDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// articleDescContent is the schema descriptor for content field.
	articleDescContent := articleFields[1].Descriptor()
	// article.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	article.ContentValidator = articleDescContent.Validators[0].(func(string) error)
	// articleDescStatus is the schema descriptor for status field.
	articleDescStatus := articleFields[2].Descriptor()
	// article.DefaultStatus holds the default value on creation for the status field.
	article.DefaultStatus = articleDescStatus.Default.(int64)
	// articleDescImg is the schema descriptor for img field.
	articleDescImg := articleFields[3].Descriptor()
	// article.DefaultImg holds the default value on creation for the img field.
	article.DefaultImg = articleDescImg.Default.(string)
	// articleDescID is the schema descriptor for id field.
	articleDescID := articleMixinFields0[0].Descriptor()
	// article.DefaultID holds the default value on creation for the id field.
	article.DefaultID = articleDescID.Default.(func() int64)
	categoryMixin := schema.Category{}.Mixin()
	categoryMixinHooks2 := categoryMixin[2].Hooks()
	category.Hooks[0] = categoryMixinHooks2[0]
	categoryMixinInters2 := categoryMixin[2].Interceptors()
	category.Interceptors[0] = categoryMixinInters2[0]
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryMixinFields1 := categoryMixin[1].Fields()
	_ = categoryMixinFields1
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreateTime is the schema descriptor for create_time field.
	categoryDescCreateTime := categoryMixinFields1[0].Descriptor()
	// category.DefaultCreateTime holds the default value on creation for the create_time field.
	category.DefaultCreateTime = categoryDescCreateTime.Default.(func() time.Time)
	// categoryDescUpdateTime is the schema descriptor for update_time field.
	categoryDescUpdateTime := categoryMixinFields1[1].Descriptor()
	// category.DefaultUpdateTime holds the default value on creation for the update_time field.
	category.DefaultUpdateTime = categoryDescUpdateTime.Default.(func() time.Time)
	// category.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	category.UpdateDefaultUpdateTime = categoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// categoryDescParentID is the schema descriptor for parent_id field.
	categoryDescParentID := categoryFields[0].Descriptor()
	// category.DefaultParentID holds the default value on creation for the parent_id field.
	category.DefaultParentID = categoryDescParentID.Default.(int64)
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[1].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = func() func(string) error {
		validators := categoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// categoryDescStatus is the schema descriptor for status field.
	categoryDescStatus := categoryFields[2].Descriptor()
	// category.DefaultStatus holds the default value on creation for the status field.
	category.DefaultStatus = categoryDescStatus.Default.(int64)
	// categoryDescID is the schema descriptor for id field.
	categoryDescID := categoryMixinFields0[0].Descriptor()
	// category.DefaultID holds the default value on creation for the id field.
	category.DefaultID = categoryDescID.Default.(func() int64)
	swiperMixin := schema.Swiper{}.Mixin()
	swiperMixinHooks2 := swiperMixin[2].Hooks()
	swiper.Hooks[0] = swiperMixinHooks2[0]
	swiperMixinInters2 := swiperMixin[2].Interceptors()
	swiper.Interceptors[0] = swiperMixinInters2[0]
	swiperMixinFields0 := swiperMixin[0].Fields()
	_ = swiperMixinFields0
	swiperMixinFields1 := swiperMixin[1].Fields()
	_ = swiperMixinFields1
	swiperFields := schema.Swiper{}.Fields()
	_ = swiperFields
	// swiperDescCreateTime is the schema descriptor for create_time field.
	swiperDescCreateTime := swiperMixinFields1[0].Descriptor()
	// swiper.DefaultCreateTime holds the default value on creation for the create_time field.
	swiper.DefaultCreateTime = swiperDescCreateTime.Default.(func() time.Time)
	// swiperDescUpdateTime is the schema descriptor for update_time field.
	swiperDescUpdateTime := swiperMixinFields1[1].Descriptor()
	// swiper.DefaultUpdateTime holds the default value on creation for the update_time field.
	swiper.DefaultUpdateTime = swiperDescUpdateTime.Default.(func() time.Time)
	// swiper.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	swiper.UpdateDefaultUpdateTime = swiperDescUpdateTime.UpdateDefault.(func() time.Time)
	// swiperDescTitle is the schema descriptor for title field.
	swiperDescTitle := swiperFields[0].Descriptor()
	// swiper.DefaultTitle holds the default value on creation for the title field.
	swiper.DefaultTitle = swiperDescTitle.Default.(string)
	// swiperDescImg is the schema descriptor for img field.
	swiperDescImg := swiperFields[1].Descriptor()
	// swiper.DefaultImg holds the default value on creation for the img field.
	swiper.DefaultImg = swiperDescImg.Default.(string)
	// swiperDescURL is the schema descriptor for url field.
	swiperDescURL := swiperFields[2].Descriptor()
	// swiper.DefaultURL holds the default value on creation for the url field.
	swiper.DefaultURL = swiperDescURL.Default.(string)
	// swiperDescOrder is the schema descriptor for order field.
	swiperDescOrder := swiperFields[3].Descriptor()
	// swiper.DefaultOrder holds the default value on creation for the order field.
	swiper.DefaultOrder = swiperDescOrder.Default.(int64)
	// swiperDescStatus is the schema descriptor for status field.
	swiperDescStatus := swiperFields[4].Descriptor()
	// swiper.DefaultStatus holds the default value on creation for the status field.
	swiper.DefaultStatus = swiperDescStatus.Default.(int64)
	// swiperDescID is the schema descriptor for id field.
	swiperDescID := swiperMixinFields0[0].Descriptor()
	// swiper.DefaultID holds the default value on creation for the id field.
	swiper.DefaultID = swiperDescID.Default.(func() int64)
	userMixin := schema.User{}.Mixin()
	userMixinHooks2 := userMixin[2].Hooks()
	user.Hooks[0] = userMixinHooks2[0]
	userMixinInters2 := userMixin[2].Interceptors()
	user.Interceptors[0] = userMixinInters2[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields1[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userFields[3].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(int64)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[4].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(int64)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() int64)
	xconfigMixin := schema.XConfig{}.Mixin()
	xconfigMixinHooks2 := xconfigMixin[2].Hooks()
	xconfig.Hooks[0] = xconfigMixinHooks2[0]
	xconfigMixinInters2 := xconfigMixin[2].Interceptors()
	xconfig.Interceptors[0] = xconfigMixinInters2[0]
	xconfigMixinFields0 := xconfigMixin[0].Fields()
	_ = xconfigMixinFields0
	xconfigMixinFields1 := xconfigMixin[1].Fields()
	_ = xconfigMixinFields1
	xconfigFields := schema.XConfig{}.Fields()
	_ = xconfigFields
	// xconfigDescCreateTime is the schema descriptor for create_time field.
	xconfigDescCreateTime := xconfigMixinFields1[0].Descriptor()
	// xconfig.DefaultCreateTime holds the default value on creation for the create_time field.
	xconfig.DefaultCreateTime = xconfigDescCreateTime.Default.(func() time.Time)
	// xconfigDescUpdateTime is the schema descriptor for update_time field.
	xconfigDescUpdateTime := xconfigMixinFields1[1].Descriptor()
	// xconfig.DefaultUpdateTime holds the default value on creation for the update_time field.
	xconfig.DefaultUpdateTime = xconfigDescUpdateTime.Default.(func() time.Time)
	// xconfig.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	xconfig.UpdateDefaultUpdateTime = xconfigDescUpdateTime.UpdateDefault.(func() time.Time)
	// xconfigDescValue is the schema descriptor for value field.
	xconfigDescValue := xconfigFields[1].Descriptor()
	// xconfig.DefaultValue holds the default value on creation for the value field.
	xconfig.DefaultValue = xconfigDescValue.Default.(string)
	// xconfigDescDesc is the schema descriptor for desc field.
	xconfigDescDesc := xconfigFields[2].Descriptor()
	// xconfig.DefaultDesc holds the default value on creation for the desc field.
	xconfig.DefaultDesc = xconfigDescDesc.Default.(string)
	// xconfigDescID is the schema descriptor for id field.
	xconfigDescID := xconfigMixinFields0[0].Descriptor()
	// xconfig.DefaultID holds the default value on creation for the id field.
	xconfig.DefaultID = xconfigDescID.Default.(func() int64)
}

const (
	Version = "v0.13.1"                                         // Version of ent codegen.
	Sum     = "h1:uD8QwN1h6SNphdCCzmkMN3feSUzNnVvV/WIkHKMbzOE=" // Sum of ent codegen.
)
