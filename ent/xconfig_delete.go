// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xxcheng123/primary-school-system/ent/predicate"
	"github.com/xxcheng123/primary-school-system/ent/xconfig"
)

// XConfigDelete is the builder for deleting a XConfig entity.
type XConfigDelete struct {
	config
	hooks    []Hook
	mutation *XConfigMutation
}

// Where appends a list predicates to the XConfigDelete builder.
func (xd *XConfigDelete) Where(ps ...predicate.XConfig) *XConfigDelete {
	xd.mutation.Where(ps...)
	return xd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (xd *XConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, xd.sqlExec, xd.mutation, xd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (xd *XConfigDelete) ExecX(ctx context.Context) int {
	n, err := xd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (xd *XConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(xconfig.Table, sqlgraph.NewFieldSpec(xconfig.FieldID, field.TypeInt64))
	if ps := xd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, xd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	xd.mutation.done = true
	return affected, err
}

// XConfigDeleteOne is the builder for deleting a single XConfig entity.
type XConfigDeleteOne struct {
	xd *XConfigDelete
}

// Where appends a list predicates to the XConfigDelete builder.
func (xdo *XConfigDeleteOne) Where(ps ...predicate.XConfig) *XConfigDeleteOne {
	xdo.xd.mutation.Where(ps...)
	return xdo
}

// Exec executes the deletion query.
func (xdo *XConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := xdo.xd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{xconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (xdo *XConfigDeleteOne) ExecX(ctx context.Context) {
	if err := xdo.Exec(ctx); err != nil {
		panic(err)
	}
}
